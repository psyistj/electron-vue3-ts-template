'use strict'

require('dotenv').config();

const path = require('path');
const { app, BrowserWindow, ipcMain } = require('electron');
const fs = require('fs');
const util = require('util');

try {
  // Use electron-reloader reload electron when changes have been made.
  require('electron-reloader')(module, { ignore: path.join(__dirname, '..', 'src') });
} catch (_) { }

const isDev = process.env.MODE === 'development';

// Keep a global reference of the window object. If you don't, the window will
// be closed automatically when the JS object is garbage collected.
let win;

let appVersion = 'version';
const homedir = require('os').homedir();
const datadir = homedir + '/.config/project';
if (!fs.existsSync(datadir)){
  console.log('folder not exist!');
  fs.mkdirSync(datadir, { recursive: true });
}
let log_file = fs.createWriteStream(datadir + '/project.log', { flags: 'w' });
let log_stdout = process.stdout;

console.log = function (d) {
  log_file.write(util.format(d) + '\n');
  log_stdout.write(util.format(d) + '\n');
}

console.error = function (d) {
  log_file.write('[ERROR] ' + util.format(d) + '\n');
  log_stdout.write('[ERROR] ' + util.format(d) + '\n');
}

const gotTheLock = app.requestSingleInstanceLock()
if (!gotTheLock) {
  app.quit();
  return;
} else {
  app.on('second-instance', (event, commandLine, workingDirectory) => {
    // 当运行第二个实例时,将会聚焦到这个窗口
    if (win) {
      if (win.isMinimized()) {
        win.restore();
      }
      win.focus();
    }
  })
}

/**
 * Creates the browser window with the specified options.
 * 
 * We also use a preload script to pass functions to the front-end but it can
 * be removed if you don't need it.
 */
const createWindow = async () => {
  win = new BrowserWindow({
    height: 768,
    width: 1280,
    show: false,
    icon: path.join(__dirname, '..', 'public', 'favicon.ico'),
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
    },
  });

  // The html file used should be the one generated by the `build` command in
  // the `dist` directory.
  win.loadFile(path.join(__dirname, '..', 'dist', 'index.html'));

  win.on('ready-to-show', () => {
    win.show();
    win.maximize();
    win.focus();
    // mainWindow.webContents.openDevTools()
  })

  // Open the dev tools if in development. This can also be removed if not needed.
  if (isDev) win.webContents.openDevTools();
};

/**
 * Called when Electron has finished initialization and is ready to create
 * browser windows.
 * 
 * Some APIs can only be used after this event occurs.
 */
app.on('ready', () => {
  createWindow();

  app.on('activate', function () {
    // On macOS it's common to re-create a window in the app when the dock icon
    // is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) createWindow();
  });
});

/**
 * Quit when all windows are closed, except on macOS. There, it's common for 
 * applications and their menu bar to stay active until the user quits 
 * explicitly with Cmd + Q.
 */
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    win = null;
    app.quit();
  }
});

// Below you can include the rest of your app's specific main process code.
// You can also put them in separate files and require them here.

ipcMain.on('get-app-version', (event, ...arg) => {
  console.log(`get-app-version arg: ${arg}`);
  console.log(`appversion: ${appVersion}`);
  event.returnValue = appVersion;
})